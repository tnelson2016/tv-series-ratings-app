{"version":3,"sources":["components/SeriesList/index.js","components/Intro/index.js","containers/Series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["SeriesListItem","_ref","series","react_default","a","createElement","react_router_dom","to","concat","show","id","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","_this$state","this","components_Intro","type","onChange","length","trim","src_components_SeriesList","Component","SingleSeries","_this2","match","params","premiered","rating","average","alt","src","image","medium","Main","react_router","exact","path","component","App","components_Main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.22f806ff.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst SeriesListItem = ({series}) => (\r\n  <li>\r\n    <Link to ={`/series/${series.show.id}`}>\r\n      {series.show.name}\r\n    </Link>\r\n  </li>\r\n)\r\n\r\n\r\nconst SeriesList = (props) => {\r\n\r\n\r\n  return(\r\n    <div>\r\n      <ul className= 'series-list'>\r\n        {props.list.map(series => (\r\n          <SeriesListItem series ={series} key={series.show.id}/>\r\n        ))}\r\n\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeriesList","import React from 'react'\r\n\r\n\r\n\r\n\r\nconst Intro = (props) => (\r\n  <p>\r\n    {props.message}\r\n  </p>\r\n)\r\n\r\n\r\n\r\n\r\n\r\nexport default Intro","import React, { Component } from 'react'\r\nimport SeriesList from '../../components/SeriesList'\r\nimport Intro from '../../components/Intro'\r\n\r\n\r\n\r\n\r\n\r\nclass Series extends Component{\r\n  state={\r\n    series:[],\r\n    seriesName:'',\r\n    isFetching: false\r\n  }\r\n\r\n\r\n\r\n\r\nonSeriesInputChange = e => {\r\n  this.setState({seriesName: e.target.value, isFetching: true})\r\n\r\n  fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n    .then((response)=> response.json())\r\n    .then(json=> this.setState({series:json, isFetching: false}))\r\n}\r\n\r\n\r\n  render(){\r\n    const {series, seriesName, isFetching} = this.state\r\n\r\n    return(\r\n      <div>\r\n          <Intro message= 'Here you can find all of your most loved series'/>\r\n        <div>\r\n          <input\r\n            value={seriesName}\r\n            type='text'\r\n            onChange={this.onSeriesInputChange}/>\r\n        </div>\r\n\r\n    {\r\n    series.length === 0 && seriesName.trim() === ''\r\n      &&\r\n      <p>Please enter series name into the input</p>\r\n    }\r\n    {\r\n    isFetching &&  series.length === 0  && seriesName.trim() !== ''\r\n      &&\r\n      <p>No Tv series have been found with this name</p>\r\n    }\r\n    {\r\n      isFetching && <p>Loading...</p>\r\n    }\r\n    {\r\n     !isFetching && <SeriesList list = {this.state.series} />\r\n    }\r\n    </div>\r\n   )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Series","import React, {Component} from 'react'\r\n\r\n\r\nclass SingleSeries extends Component{\r\n  state ={\r\n    show: null\r\n  }\r\n\r\ncomponentDidMount(){\r\n  const { id } = this.props.match.params\r\n\r\n  fetch(`http://api.tvmaze.com/shows/${id}?embed-episodes`)\r\n    .then((response)=> response.json())\r\n    .then(json=> this.setState({show: json}))\r\n}\r\n\r\n  render(){\r\n    const { show } = this.state\r\n\r\n\r\n    return(\r\n      <div>\r\n        {show === null && <p>Loading...</p>}\r\n        {\r\n          show !== null\r\n          &&\r\n          <div>\r\n            <p>{show.name}</p>\r\n            <p>Premiered - {show.premiered}</p>\r\n            <p>Rating - {show.rating.average}</p>\r\n          \r\n\r\n\r\n            <p>\r\n              <img alt=\"Show\" src ={show.image.medium} />\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default SingleSeries","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Series from '../../containers/Series'\r\nimport SingleSeries from '../../containers/SingleSeries'\r\n\r\n\r\nconst Main = props => (\r\n  <Switch>\r\n        <Route exact path =\"/\" component={Series} />\r\n        <Route path= \"/series/:id\" component={SingleSeries}/>\r\n  </Switch>\r\n)\r\n\r\n\r\n\r\nexport default Main","import React,{ Component } from 'react';\r\nimport Main from '../Main'\r\nimport './App.css';\r\n//import 'whatwg-fetch'\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <h1>TV Series List</h1>\r\n      </header>\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\n\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n   document.getElementById('root')\n );\n\n\n\nserviceWorker.register();"],"sourceRoot":""}